{"ast":null,"code":"import _defineProperty from \"/Users/katherineyeary/Desktop/Always_Be_Coding/the-flan-also-rises/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/katherineyeary/Desktop/Always_Be_Coding/the-flan-also-rises/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/katherineyeary/Desktop/Always_Be_Coding/the-flan-also-rises/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/katherineyeary/Desktop/Always_Be_Coding/the-flan-also-rises/client/src/pages/Search.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Jumbotron } from 'react-bootstrap';\nimport API from \"../utils/API\";\nimport Searchbar from './Searchbar'; //import Form from '../components/Form';\n\nfunction Search() {\n  // Setting our component's initial state\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      books = _useState2[0],\n      setBooks = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      formObject = _useState4[0],\n      setFormObject = _useState4[1]; // Load all books and store them with setBooks\n\n\n  useEffect(function () {\n    searchBook();\n  });\n\n  function bookData() {\n    return {\n      title: books.volumeInfo.title,\n      authors: books.volumeInfo.authors,\n      link: books.volumeInfo.infoLink,\n      description: books.volumeInfo.description,\n      image: books.volumeInfo.imageLinks.thumbnail,\n      googleId: books.id\n    };\n  }\n  /*   // Deletes a book from the database with a given id, then reloads books from the db\n    function deleteBook(id) {\n      API.deleteBook(id)\n        .then(res => loadBooks())\n        .catch(err => console.log(err));\n    } */\n\n\n  function searchBook(query) {\n    API.getBook(query).then(function (res) {\n      return setBooks({\n        books: res.data.items.map(function (info) {\n          return bookData(info);\n        })\n      });\n    }).catch(function (err) {\n      return console.error(err);\n    });\n  }\n\n  ; // Handles updating component state when the user types into the input field\n\n  function handleInputChange(event) {\n    var _event$target = event.target,\n        name = _event$target.name,\n        value = _event$target.value;\n    setFormObject(_objectSpread({}, formObject, _defineProperty({}, name, value)));\n  }\n\n  ; // When the form is submitted, use the API.saveBook method to save the book data\n  // Then reload books from the database\n\n  function handleFormSubmit(event) {\n    event.preventDefault();\n    searchBook();\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(Jumbotron, {\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }\n  }, \"Results\"), /*#__PURE__*/React.createElement(Searchbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  })));\n}\n\nexport default Search;","map":{"version":3,"sources":["/Users/katherineyeary/Desktop/Always_Be_Coding/the-flan-also-rises/client/src/pages/Search.js"],"names":["React","useState","useEffect","Jumbotron","API","Searchbar","Search","books","setBooks","formObject","setFormObject","searchBook","bookData","title","volumeInfo","authors","link","infoLink","description","image","imageLinks","thumbnail","googleId","id","query","getBook","then","res","data","items","map","info","catch","err","console","error","handleInputChange","event","target","name","value","handleFormSubmit","preventDefault"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,SAAP,MAAsB,aAAtB,C,CACA;;AAEA,SAASC,MAAT,GAAkB;AAChB;AADgB,kBAEUL,QAAQ,CAAC,EAAD,CAFlB;AAAA;AAAA,MAETM,KAFS;AAAA,MAEFC,QAFE;;AAAA,mBAGoBP,QAAQ,CAAC,EAAD,CAH5B;AAAA;AAAA,MAGTQ,UAHS;AAAA,MAGGC,aAHH,kBAKhB;;;AACCR,EAAAA,SAAS,CAAC,YAAM;AACfS,IAAAA,UAAU;AACX,GAFS,CAAT;;AAID,WAASC,QAAT,GAAqB;AACnB,WAAO;AACLC,MAAAA,KAAK,EAAEN,KAAK,CAACO,UAAN,CAAiBD,KADnB;AAEHE,MAAAA,OAAO,EAAER,KAAK,CAACO,UAAN,CAAiBC,OAFvB;AAGHC,MAAAA,IAAI,EAAET,KAAK,CAACO,UAAN,CAAiBG,QAHpB;AAIHC,MAAAA,WAAW,EAAEX,KAAK,CAACO,UAAN,CAAiBI,WAJ3B;AAKHC,MAAAA,KAAK,EAAEZ,KAAK,CAACO,UAAN,CAAiBM,UAAjB,CAA4BC,SALhC;AAMHC,MAAAA,QAAQ,EAAEf,KAAK,CAACgB;AANb,KAAP;AAQD;AACH;;;;;;;;AAOC,WAASZ,UAAT,CAAqBa,KAArB,EAA4B;AACzBpB,IAAAA,GAAG,CAACqB,OAAJ,CAAYD,KAAZ,EACKE,IADL,CACU,UAAAC,GAAG;AAAA,aAAInB,QAAQ,CAAC;AAAED,QAAAA,KAAK,EAAEoB,GAAG,CAACC,IAAJ,CAASC,KAAT,CAAeC,GAAf,CAAmB,UAAAC,IAAI;AAAA,iBAAInB,QAAQ,CAACmB,IAAD,CAAZ;AAAA,SAAvB;AAAT,OAAD,CAAZ;AAAA,KADb,EAEKC,KAFL,CAEW,UAAAC,GAAG;AAAA,aAAIC,OAAO,CAACC,KAAR,CAAcF,GAAd,CAAJ;AAAA,KAFd;AAGH;;AAAA,GA/BiB,CAiChB;;AACA,WAASG,iBAAT,CAA2BC,KAA3B,EAAkC;AAAA,wBACRA,KAAK,CAACC,MADE;AAAA,QACxBC,IADwB,iBACxBA,IADwB;AAAA,QAClBC,KADkB,iBAClBA,KADkB;AAEhC9B,IAAAA,aAAa,mBAAKD,UAAL,sBAAkB8B,IAAlB,EAAyBC,KAAzB,GAAb;AACD;;AAAA,GArCe,CAuChB;AACA;;AACA,WAASC,gBAAT,CAA0BJ,KAA1B,EAAiC;AAC/BA,IAAAA,KAAK,CAACK,cAAN;AACA/B,IAAAA,UAAU;AACX;;AAAA;AAEC,sBACE,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAC,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAQI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,eAEI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADA,CARJ,eAeI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfJ,CADF,CADF;AAqBH;;AAED,eAAeL,MAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Jumbotron } from 'react-bootstrap';\nimport API from \"../utils/API\";\nimport Searchbar from './Searchbar';\n//import Form from '../components/Form';\n\nfunction Search() {\n  // Setting our component's initial state\n  const [books, setBooks] = useState([]);\n  const [formObject, setFormObject] = useState({})\n\n  // Load all books and store them with setBooks\n   useEffect(() => {\n    searchBook();\n  });\n\n  function bookData () {\n    return {\n      title: books.volumeInfo.title,\n        authors: books.volumeInfo.authors,\n        link: books.volumeInfo.infoLink,\n        description: books.volumeInfo.description,\n        image: books.volumeInfo.imageLinks.thumbnail,\n        googleId: books.id\n    }\n  }\n/*   // Deletes a book from the database with a given id, then reloads books from the db\n  function deleteBook(id) {\n    API.deleteBook(id)\n      .then(res => loadBooks())\n      .catch(err => console.log(err));\n  } */\n\n function searchBook (query) {\n    API.getBook(query)\n        .then(res => setBooks({ books: res.data.items.map(info => bookData(info)) }))\n        .catch(err => console.error(err));\n};\n\n  // Handles updating component state when the user types into the input field\n  function handleInputChange(event) {\n    const { name, value } = event.target;\n    setFormObject({...formObject, [name]: value})\n  };\n\n  // When the form is submitted, use the API.saveBook method to save the book data\n  // Then reload books from the database\n  function handleFormSubmit(event) {\n    event.preventDefault();\n    searchBook();\n  };\n\n    return (\n      <Jumbotron className=''>\n        <div>\n          <Col/>\n            {/*<div className='form'>\n               <Form.Input\n              handleInputChange={handleInputChange}\n            />\n              <Form.Button handleFormSubmit={handleFormSubmit}/> \n            </div> */}\n            <Col>\n            <div className=\"container\">\n                <h2>Results</h2>\n                <Searchbar/>\n                {/* <Results books={books} /> */}\n            </div>\n            </Col>\n            <Col/>\n        </div>\n        </Jumbotron>\n    )\n}\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}