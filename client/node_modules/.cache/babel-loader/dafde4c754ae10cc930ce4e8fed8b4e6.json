{"ast":null,"code":"var _jsxFileName = \"/Users/katherineyeary/Desktop/Always_Be_Coding/the-flan-also-rises/client/src/pages/Search.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Jumbotron, Col, Row } from 'react-bootstrap';\nimport API from \"../utils/API\";\nimport Searchbar from './Searchbar'; //import Form from '../components/Form';\n\nfunction Search() {\n  // Setting our component's initial state\n  //const [books, setBooks] = useState([]);\n  //const [formObject, setFormObject] = useState({})\n  // Load all books and store them with setBooks\n\n  /*    useEffect(() => {\n      searchBook();\n    }); */\n\n  /*   function bookData () {\n      return {\n          title: books.volumeInfo.title,\n          authors: books.volumeInfo.authors,\n          link: books.volumeInfo.infoLink,\n          description: books.volumeInfo.description,\n          image: books.volumeInfo.imageLinks.thumbnail,\n          googleId: books.id\n      } */\n\n  /*   // Deletes a book from the database with a given id, then reloads books from the db\n    function deleteBook(id) {\n      API.deleteBook(id)\n        .then(res => loadBooks())\n        .catch(err => console.log(err));\n    } */\n\n  /*  function searchBook (query) {\n      API.getBook(query)\n          .then(res => setBooks({ books: res.data.items.map(info => bookData(info)) }))\n          .catch(err => console.error(err));\n  }; */\n  // Handles updating component state when the user types into the input field\n\n  /*   function handleInputChange(event) {\n      const { name, value } = event.target;\n      setFormObject({...formObject, [name]: value})\n    }; */\n  // When the form is submitted, use the API.saveBook method to save the book data\n  // Then reload books from the database\n\n  /*   function handleFormSubmit(event) {\n      event.preventDefault();\n      searchBook();\n    }; */\n  return /*#__PURE__*/React.createElement(Jumbotron, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Col, {\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  }, \"Results\"), /*#__PURE__*/React.createElement(Searchbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  })));\n}\n\nexport default Search;","map":{"version":3,"sources":["/Users/katherineyeary/Desktop/Always_Be_Coding/the-flan-also-rises/client/src/pages/Search.js"],"names":["React","useState","useEffect","Jumbotron","Col","Row","API","Searchbar","Search"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,GAAzB,QAAoC,iBAApC;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,SAAP,MAAsB,aAAtB,C,CACA;;AAEA,SAASC,MAAT,GAAkB;AAChB;AACA;AACA;AAEA;;AACF;;;;AAIA;;;;;;;;;;AAUA;;;;;;;AAOA;;;;;AAME;;AACF;;;;AAKE;AACA;;AACF;;;;AAKI,sBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,eAEI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAFJ,eAMI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,CADF,CADF;AAYH;;AAED,eAAeA,MAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Jumbotron, Col, Row } from 'react-bootstrap';\nimport API from \"../utils/API\";\nimport Searchbar from './Searchbar';\n//import Form from '../components/Form';\n\nfunction Search() {\n  // Setting our component's initial state\n  //const [books, setBooks] = useState([]);\n  //const [formObject, setFormObject] = useState({})\n\n  // Load all books and store them with setBooks\n/*    useEffect(() => {\n    searchBook();\n  }); */\n\n/*   function bookData () {\n    return {\n        title: books.volumeInfo.title,\n        authors: books.volumeInfo.authors,\n        link: books.volumeInfo.infoLink,\n        description: books.volumeInfo.description,\n        image: books.volumeInfo.imageLinks.thumbnail,\n        googleId: books.id\n    } */\n  \n/*   // Deletes a book from the database with a given id, then reloads books from the db\n  function deleteBook(id) {\n    API.deleteBook(id)\n      .then(res => loadBooks())\n      .catch(err => console.log(err));\n  } */\n\n/*  function searchBook (query) {\n    API.getBook(query)\n        .then(res => setBooks({ books: res.data.items.map(info => bookData(info)) }))\n        .catch(err => console.error(err));\n}; */\n\n  // Handles updating component state when the user types into the input field\n/*   function handleInputChange(event) {\n    const { name, value } = event.target;\n    setFormObject({...formObject, [name]: value})\n  }; */\n\n  // When the form is submitted, use the API.saveBook method to save the book data\n  // Then reload books from the database\n/*   function handleFormSubmit(event) {\n    event.preventDefault();\n    searchBook();\n  }; */\n\n    return (\n      <Jumbotron>\n        <Row>\n          <Col md={3}/>\n            <Col md={6}>\n                <h2>Results</h2>\n                <Searchbar/>\n            </Col>\n            <Col md={3}/>\n        </Row>\n        </Jumbotron>\n    )\n}\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}